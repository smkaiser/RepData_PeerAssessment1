geom_line()
ggplot(plotData, aes(x = year, y = Emissions, color=type)) + ylab(expression('Total PM'[2.5]*' Emission')) +
ggtitle(expression('PM'[2.5]*' Emission for Baltimore City, 1999-2008')) +
geom_point() +
geom_line()
setwd("~/~")
setwd("~")
library(shiny)
runApp("TimeSeries/")
runApp("TimeSeries/")
runApp("TimeSeries/")
runApp("TimeSeries/")
runApp("TimeSeries/")
library(shiny)
runApp("TimeSeries/")
runApp("TimeSeries/")
runApp("TimeSeries/")
rm(NEI)
rm(a)
rm(b)
runApp("TimeSeries/")
runApp("TimeSeries/")
runApp("TimeSeries/")
runApp("TimeSeries/")
setwd("~/Sync")
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
setwd("..")
runApp("TimeSeries/")
runApp("TimeSeries/")
library(shiny)
runApp("TimeSeries/")
runApp("TimeSeries/")
?rbinom
rbinom(10,1 , .5)
rbinom(10,1 , .5)
rbinom(10,1 , .5)
rbinom(10,2 , .5)
rbinom(10, 1, .5)
log10(0)
log10(0.1)
log10(1)
rbinom(10, 1, .5)
rbinom(10, 1, .5)
rbinom(10, 1, .5)
rbinom(10, 1, .5)
rbinom(10, 1, .7)
rbinom(10, 1, .7)
rbinom(10, 1, .7)
rbinom(10, 1, .7)
rbinom(10, 1, .7)
rbinom(10, 1, .1)
rbinom(10, 1, .1)
rbinom(10, 1, .1)
rbinom(10, 1, .1)
rbinom(10, 1, .5)
install.packages("quantmod")
library(quantmod)
install.packages("e1071")
library(e1071)
install.packages("ggplot2")
library(ggplot2)
Data<-AUD/USD
Data<-read.csv("AUDUSD.csv")
str(Data)
RSI3<-RSI(Op(Data),n=3)
SMA50<-SMA(Op(Data),n=50)
Trend<-Op(Data)-SMA50
Price<-Cl(Data)-Op(Data)
Class<-ifelse(Price>0,"UP","DOWN")
#The variable we are looking to predict, the direction of the next bar
DataSet<-data.frame(RSI3,Trend,Class)
DataSet<-DataSet[-c(1:49),]
#Create the data set and removing the points where our indicators are still being calculated
Training<-DataSet[1:4528,] ; Test<-DataSet[4529:6038,] ; Val<-DataSet[6039:7548,]
#Separate the data into 60% training set to build our model, 20% test set to test the patterns we found, and 20% validation set to run our strategy over new data
SVM<-svm(Class~RSI3+Trend,data=Training, kernel="radial",cost=1,gamma=1/2)
#Build our support vector machine using a radial basis function as our kernel, the cost, or C, at 1, and the gamma function at &frac12;, or 1 over the number of inputs we are using
TrainingPredictions<-predict(SVM,Training,type="class")
TrainingData<-data.frame(Training,TrainingPredictions)
ggplot(TrainingData,aes(x=Trend,y=RSI3))+stat_density2d(geom="contour",aes(color=TrainingPredictions))+labs(title="SVM RSI3 and Trend Predictions",x="Open - SMA50",y="RSI3",color="Training Predictions")
library(datasets)
data(airquality)
pairs(airquality)
setwd("~/Coursera/RepData_PeerAssessment1")
??unzip
fileinfo <- file.info("./activity.zip")
fileinfo
fileinfo$mtime
activity <- read.csv("./activity.csv")
View(activity)
steps <- activity[!is.na(activity$steps)]
steps <- activity[,!is.na(activity$steps)]
steps <- activity[!is.na(activity$steps),]
View(steps)
hist (histdata[histdata$steps > 0, ])
histdata <- activity[!is.na(activity$steps),]
hist (histdata[histdata$steps > 0, ])
library(lubridate)
?colClasses
??colclasses
?read.csv
activity <- read.csv("./activity.csv", colClasses = c("integer", "Date", "integer"))
View(activity)
histdata <- activity[!is.na(activity$steps),]
hist (histdata[histdata$steps > 0, ])
steps <-histdata[histdata$steps > 0, ]
View(steps)
hist (steps$date)
hist (steps$date, breaks="days")
hist (histdata$date, breaks="days")
hist (steps$date, breaks="days")
a <- hist (steps$date, breaks="days")
str(a)
a <- hist (steps$steps)
library(dplyr)
hist(histdata$steps)
aggregate(histdata, by = histdata$date)
aggregate(histdata, by = histdata$date, FUN = sum)
?aggregate
list(histdata$date)
unique(histdata$date)
aggregate(histdata, by = unique(histdata$date), FUN = sum)
aggregate(histdata, by = list(unique(histdata$date), FUN = sum)
)
aggregate(histdata, by = list(unique(histdata$date)), FUN = sum)
aggregate(histdata, list(Date = date), sum)
aggregate(histdata$steps, histdata$date, sum)
aggregate(histdata$steps, list(histdata$date), sum)
steptotals = aggregate(histdata$steps, list(histdata$date), sum)
hist(steptotals$x)
stepmean = mean(steptotals)
steptotals = aggregate(histdata$steps, Total = list(histdata$date), sum)
steptotals = aggregate(histdata$steps, Total = list(histdata$date), FUN = sum)
steptotals = aggregate(histdata$steps, list(histdata$date), FUN = sum)
stepmean = mean(steptotals$x)
hist(steptotals$x)
View(steptotals)
stepmean = mean(steptotals$x)
hist(steptotals$x, xlab = "Number of steps per day", title = "Histogram of number of steps per day")
hist(steptotals$x, xlab = "Number of steps per day", main = "Histogram of number of steps per day")
library(ggplot2)
ggplot(steptotals$x) + geom_histogram()
ggplot(steptotals, aes(x = x)) + geom_histogram()
hist(steptotals$x, xlab = "Number of steps per day", main = "Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram()
hist(steptotals$x, xlab = "Number of steps per day", main = "Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="blue")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#222299")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4040C0")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4040FF")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4040FF", linetype=1)
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4040FF", linetype=1, binwidth=1000)
?ggtitle
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4040FF", linetype=1, binwidth=1000) +
xlab("Number of steps per day") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#8080F0", linetype=1, binwidth=1000) +
xlab("Number of steps per day") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", linetype=1, binwidth=1000) +
xlab("Number of steps per day") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", linetype=1, binwidth=1000) +
xlab("Number of steps per day (bin = 1000") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", linetype=1, binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
?geom_histogram
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", linetype=1, binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black",  binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black", size=1, binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black", weight=2, binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black", binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day")
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black", binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day") + scale_y_continuous(breaks= pretty_breaks())
library(scales)
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black", binwidth=1000) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Frequency") +
ggtitle("Histogram of number of steps per day") + scale_y_continuous(breaks= pretty_breaks())
?format
stepmean = format(mean(steptotals$x), scientific = F)
hist(steptotals$x)
hist(steptotals$x, breaks=1000)
hist(steptotals$x, breaks=25)
View(fileinfo)
fileinfo$mtime
fileinfo <- file.info("./activity.csv")
fileinfo$mtime
intervalsteps = aggregate(histdata$steps, list(histdata$interval), FUN=mean)
View(intervalsteps)
plot(intervalsteps)
summary(intervalsteps)
intervalsteps$time <- ms(intervalsteps$Group.1)
View(intervalsteps)
intervalsteps$time <- null
intervalsteps$time <- NULL
sprintf(5, "0000")
?sprintf
sprintf("0000", 5)
sprintf("4d", 5)
sprintf("%4d", 5)
sprintf("%4.0d", 5)
sprintf("%4d", 5)
sprintf("%04d", 5)
intervalsteps$time <- ms(sprintf("%04d", intervalsteps$Group.1))
View(plotData)
View(intervalsteps)
intervalsteps$time <- ms(sprintf("%04d", as.numeric(intervalsteps$Group.1)))
View(intervalsteps)
sprintf("%04d", "3")
sprintf("%04d", 3)
sprintf("%04d", 332)
sprintf("%04d", 33233)
sprintf("%04d", 3323)
str(intervalsteps)
intervalsteps$time <- hm(sprintf("%04d", as.numeric(intervalsteps$Group.1)))
View(intervalsteps)
intervalsteps$time <- hm(sprintf("%04d", intervalsteps$Group.1))
?parse.hms
?ms
?hm
hm("0005")
??substring
intervalsteps$time <- sprintf("%04d", intervalsteps$Group.1)
View(intervalsteps)
?split
??split
?substr
intervalsteps$time <- hm(substr(intervalsteps$time, 1, 2), substr(intervalsteps$time, 3, 4))
View(intervalsteps)
intervalsteps$time <- sprintf("%04d", intervalsteps$Group.1)
substr(intervalsteps$time, 1, 2)
substr(intervalsteps$time, 3, 4)
?hm
hms("235500")
parse_date_time("0005", "hm")
intervalsteps$time <- parse_date_time(sprintf("%04d", intervalsteps$Group.1), "hhmm")
intervalsteps$time <- sprintf("%04d", intervalsteps$Group.1)
intervalsteps$time <- parse_date_time(intervalsteps$time, "hhmm")
summary(intervalsteps$time)
table(intervalsteps$time)
parse_date_time("2355")
parse_date_time("2355", "hhmm")
parse_date_time("2355", "HHMM")
intervalsteps$time <- sprintf("%04d", intervalsteps$Group.1)
intervalsteps$time <- parse_date_time(intervalsteps$time, "hm")
View(intervalsteps)
plot(intervalsteps$time, intervalsteps$x)
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point()
ggplot(intervalsteps, aes(x=time, y=x)) + geom_bar()
ggplot(intervalsteps, aes(x=time, y=x)) + geom_area()
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point()
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point()
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=date_breaks("1 hour"))
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=date_breaks("1 day"))
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=date_breaks("2 weeks"))
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=date_breaks())
scale_x_datetime(breaks=10)
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=10)
library(scales)
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=10)
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=date_breaks(width= "1 day"))
ggplot(intervalsteps, aes(x=time, y=x)) + geom_point() +
scale_x_datetime(breaks=date_breaks(width= "1 month"))
date_breaks("1 day")
date_breaks("1 day")()
date_breaks("1 day")("asdf")
date_breaks("1 day")(date)
date_breaks("1 day")(Date)
date_breaks("1 day")(date())
date()
class
class(date())
class(date
)
a <- date()
class(a)
plot(intervalsteps$time, intervalsteps$x)
plot(intervalsteps$time, intervalsteps$x, title="Daily activity pattern")
plot(intervalsteps$time, intervalsteps$x, main="Daily activity pattern")
plot(intervalsteps$time, intervalsteps$x, xlab = "Hour:minute interval", ylab="Avg number of steps", main="Daily activity pattern")
plot(intervalsteps$time, intervalsteps$x, xlab = "5 minute interval starting at time", ylab="Avg number of steps", main="Daily activity pattern")
plot(intervalsteps$time, intervalsteps$x, xlab = "5 minute interval starting at time", ylab="Mean number of steps", main="Daily activity pattern")
View(intervalsteps)
maxTime
minTime
intervalsteps[intervalsteps$x == max(intervalsteps$x),]
intervalsteps = aggregate(histdata$steps, list(histdata$interval), FUN=mean)
names(intervalsteps) = c("Interval", "MeanSteps")
intervalsteps$Time <- parse_date_time(sprintf("%04d", intervalsteps$Interval), "hm")
plot(intervalsteps$Time, intervalsteps$MeanSteps, xlab = "5 minute interval starting at time", ylab="Mean number of steps", main="Daily activity pattern")
intervalsteps[intervalsteps$x == max(intervalsteps$x),]
intervalsteps[intervalsteps$MeanSteps == max(intervalsteps$MeanSteps),]
intervalsteps[intervalsteps$MeanSteps == max(intervalsteps$MeanSteps),2:3]
a <- intervalsteps[intervalsteps$MeanSteps == max(intervalsteps$MeanSteps),2:3]
a
a$Time
format(a$Time, "%h:%m")
format(a$Time, "%H:%M")
format(a$Time, "%H:%M %a")
format(a$Time, "%H:%M %A")
format(a$Time, "%H:%M %p")
plot(intervalsteps$Time, intervalsteps$MeanSteps, xlab = "5 minute interval starting at time", ylab="Mean number of steps during interval", main="Daily activity pattern")
library(knitr)
names(activity)
sum(is.na(activity$steps))
?plot
??axis
?merge
naonly <- activity[is.na(steps),]
naonly <- activity[is.na(activity$steps),]
head(naonly)
head(intervalsteps)
View(intervalsteps)
imputed <- merge(naonly, intervalsteps, by.x="interval", by.y="Interval")
View(imputed)
View(naonly)
head(select(imputed, names(naonly)))
head(select(imputed, "interval")
)
select(imputed)
head(select(imputed))
head(select(imputed, "MeanSteps"))
select(imputed, c("interval", "steps"))
select(imputed, interval, steps)
View(histdata)
names(histdata)
names(imputed)
head(imputed)
new <- rbind(histdata, select(imputed, MeanSteps, date, interval))
new <- rbind(histdata, select(imputed, MeanSteps, date, interval))
names(imputed = c("interval", "NA", "date", "steps", "time")
)
names(imputed) = c("interval", "NA", "date", "steps", "time")
new <- rbind(histdata, select(imputed, MeanSteps, date, interval))
new <- rbind(histdata, select(imputed, steps, date, interval))
steptotals = aggregate(newdata$steps, list(newdata$date), FUN = sum)
stepmean = format(mean(steptotals$x), scientific = F)
stepmedian = format(median(steptotals$x), scientific = F)
newdata <- rbind(histdata, select(imputed, steps, date, interval))
steptotals = aggregate(newdata$steps, list(newdata$date), FUN = sum)
stepmean = format(mean(steptotals$x), scientific = F)
stepmedian = format(median(steptotals$x), scientific = F)
ggplot(steptotals, aes(x = x)) + geom_histogram(fill="#4080F0", color="black", binwidth=1000) +
scale_y_continuous(breaks=pretty_breaks()) +
xlab("Number of steps per day (bin = 1000)") +
ylab("Number of observations") +
ggtitle("Histogram of number of steps per day")
?factor
head(steptotals)
weekdays(steptotals$Group.1)
weekdays(steptotals$Group.1, TRUE)
FALSE
is_weekday <- function(s) {
if (s %in% c("Sat", "Sun", "Saturday", "Sunday")) {
return(FALSE)
}
else {
return(TRUE)
}
}
is_weekday("Sat")
is_weekday("Sadt")
is_weekday <- function(s) {
if (s %in% c("Sat", "Sun", "Saturday", "Sunday")) {
return("Weekend")
}
else {
return("Weekday")
}
}
intervalsteps$Weekday <- is_weekday(weekdays(intervalsteps$Time))
View(intervalsteps)
intervalsteps$Weekday <- NULL
?if
??if
is_weekday <- function(s) {
ifelse (s %in% c("Sat", "Sun", "Saturday", "Sunday"), "Weekend", "Weekday")
}
str(newdata)
newdata$weekday = is_weekday(newdata$date)
View(newdata)
str(newdata)
?factor
newdata$weekday = factor(is_weekday(newdata$date))
str(newdata)
rm(SCC)
newdata$weekday <- factor(is_weekday(weekdays(newdata$date)))
str(newdata)
newdata$weekday <- factor(is_weekday(weekdays(newdata$date)))
str(newdata)
table(newdata$weekday)
newdata[newdata$weekday == 'Weekday',]
table(newdata$weekday)
?length
?plot
newdata$weekday <- factor(is_weekday(weekdays(newdata$date)))
intervalsteps = aggregate(newdata$steps, list(newdata$interval), FUN=mean)
names(intervalsteps) = c("Interval", "MeanSteps")
?aggregate
intervalsteps = aggregate(newdata$steps, list(newdata$interval, newdata$weekday), FUN=mean)
View(intervalsteps)
names(intervalsteps) = c("Interval", "Weekday", "MeanSteps")
View(intervalsteps)
intervalsteps$Time <- parse_date_time(sprintf("%04d", intervalsteps$Interval), "hm")
maxinterval = intervalsteps[intervalsteps$MeanSteps == max(intervalsteps$MeanSteps),2:3]
plot(intervalsteps$Time, intervalsteps$MeanSteps, xlab = "Starting time of 5 minute interval", ylab="Mean number of steps during interval", main="Daily activity pattern")
View(intervalsteps)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom(point())
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point()
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap(Weekday)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap(aes(Weekday))
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap()
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap(facets = Weekday)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap(~ Weekday)
?facet_grid
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_grid(~ Weekday)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_grid(Weekday ~)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_grid(Weekday)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_grid(Weekday ~ NULL)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_grid(Weekday ~)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_grid(. ~ Weekday)
?facet_null
?facet_wrap
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap(. ~ Weekday, ncol=1)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) + geom_point() + facet_wrap(~ Weekday, ncol=1)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) +
geom_point() +
xlab("Starting time of 5 minute interval") +
ylab("Mean number of steps during interval") +
ggtitle("Weekday/Weekend activity pattern")
facet_wrap(~ Weekday, ncol=1)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) +
geom_point() +
xlab("Starting time of 5 minute interval") +
ylab("Mean number of steps during interval") +
ggtitle("Weekday/Weekend activity pattern") +
facet_wrap(~ Weekday, ncol=1)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) +
geom_point() +
scale_x_datetime(breaks = pretty_breaks())
xlab("Starting time of 5 minute interval") +
ylab("Mean number of steps during interval") +
ggtitle("Weekday/Weekend activity pattern") +
facet_wrap(~ Weekday, ncol=1)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) +
geom_point() +
scale_x_datetime(breaks = pretty_breaks()) +
xlab("Starting time of 5 minute interval") +
ylab("Mean number of steps during interval") +
ggtitle("Weekday/Weekend activity pattern") +
facet_wrap(~ Weekday, ncol=1)
ggplot(intervalsteps, aes(x=Time, y=MeanSteps)) +
geom_point() +
scale_x_datetime(labels = date_format("%H:%M")) +
xlab("Starting time of 5 minute interval") +
ylab("Mean number of steps during interval") +
ggtitle("Weekday/Weekend activity pattern") +
facet_wrap(~ Weekday, ncol=1)
names(imputed)
imputed[,"steps"]
imputed[,c("steps", "date", "interval")]
newdata <- rbind(histdata, imputed[,c("steps", "date", "interval")])
steptotals = aggregate(newdata$steps, list(newdata$date), FUN = sum)
stepmean = format(mean(steptotals$x), scientific = F)
View(steptotals)
?weekdays
wday
wday()
is_weekday <- function(s) {
ifelse (wday(s)==1 | wday(s) == 6, "Weekend", "Weekday")
#ifelse (s %in% c("Sat", "Sun", "Saturday", "Sunday"), "Weekend", "Weekday")
}
newdata$weekday <- factor(is_weekday(newdata$date))
str(newdata)
wday(newdata$date)
table(wday(newdata$date))
is_weekday <- function(s) {
ifelse (wday(s)==1 | wday(s) == 7, "Weekend", "Weekday")
}
